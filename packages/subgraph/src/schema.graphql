# typings for graphql-code-generator, uncomment to generate Typscript types
# scalar BigInt
# scalar Bytes

enum AnswerStatus {
  Unclaimed
  Claimed
}

enum RewardCalculated {
  NotCalculated
  Calculated
}

enum QuestionType {
  Pricing
  GroundTruth
}

type PricingContractMeta @entity {
  id: ID!
  address: Bytes!
  tokenAddress: Bytes
  rewardAddress: Bytes
}

type User @entity {
  id: ID! # address
  questions: [Question!] @derivedFrom(field: "owner")
  answers: [Answer!] @derivedFrom(field: "answerer")
  answerGroups: [AnswerGroup!] @derivedFrom(field: "owner")
  questionCount: BigInt!
  totalBounty: BigInt!
  answerCount: BigInt!
  answerGroupCount: BigInt!
  totalRewardsClaimed: BigInt!
  totalStaked: BigInt!
  tokenBalance: BigInt!
  tokenApprovalBalance: BigInt!
}

type QuestionCategory @entity {
  id: ID!
  label: String!
  questionCount: BigInt!
  totalBounty: BigInt!
  totalStaked: BigInt!
  rewardedQuestionCount: BigInt!
  questions: [Question!] @derivedFrom(field: "category")
}

type Question @entity {
  id: ID!
  questionType: QuestionType!
  owner: User!
  category: QuestionCategory!
  description: String!
  answerSet: [BigInt!]!
  answerSetTotalStaked: [BigInt!]!
  bounty: BigInt!
  totalStaked: BigInt!
  endTime: BigInt!
  pricingTime: BigInt!
  isRewardCalculated: RewardCalculated!
  answerCount: BigInt!
  answers: [Answer!] @derivedFrom(field: "question")
  created: BigInt!
}

type QuestionGroup @entity {
  id: ID!
  questions: [Question!]!
}

type Answer @entity {
  id: ID! # questionId-answerer address
  answerer: User!
  question: Question! 
  answerIndex: Int!
  stakeAmount: BigInt!
  rewardClaimed: BigInt!
  status: AnswerStatus!
  created: BigInt!
  group: AnswerGroup @derivedFrom(field: "answers")
}

type AnswerGroup @entity {
  id: ID!
  questionGroup: QuestionGroup!
  answers: [Answer!]!
  owner: User!
}
